# generated by fastapi-codegen:
#   filename:  fridgefreak-api_OAS3.yaml
#   timestamp: 2024-06-06T14:21:29+00:00

from __future__ import annotations

from datetime import date
from typing import Any, List, Optional, Union

from fastapi import FastAPI, Query, APIRouter, HTTPException

from fridgefreak_api.models import (
    Product,
    StorageDeleteRequest,
    StorageGetResponse,
    ProductNotFoundResponse,
)

### temp data structure
products_dict = {}

async def get_product_by_id(id: int):
    ret = products_dict.get(id)
    if not ret: 
        raise HTTPException(status_code=404, detail="Product not found")
    return ret

def find_product(**kwargs) -> List[Product]:
    ret = products_dict.values()
    for key, value in kwargs.items():
        if key not in Product.model_fields: 
            kwargs.pop(key)
            continue
        ret = filter(lambda product: getattr(product, key) == value, products_dict.values())
        ret = list(ret)
    return list(ret)
###

app = FastAPI(
    title="FridgeFreak-api",
    version="1.2.0",
)

router = APIRouter(prefix="/api")

@router.get("/storage", response_model=StorageGetResponse)
async def g_e_t_storage(
    name: Optional[str] = None,
    storage_space: Optional[str] = None,
    category: Optional[str] = None,
    quantity: Optional[int] = None,
    expire2date: Optional[date] = None,
) -> StorageGetResponse:
    filter_args = {}
    if name: filter_args["name"] = name
    if storage_space: filter_args["storage_space"] = storage_space
    if category: filter_args["category"] = category
    if quantity: filter_args["quantity"] = quantity
    products = find_product(**filter_args)

    return {
                "result_count": len(products),
                "products": products
            }

@router.post("/storage", response_model=None, status_code=201)
def p_o_s_t_storage(body: List[Product]) -> Any:
    id = len(products_dict)

    for product in body:
        products_dict[id] = product
        id += 1
        
    return {"message": f"Added {len(body)} products"}


@router.delete("/storage", response_model=Any, responses={"500": {"model": Any}})
def d_e_l_e_t_e_storage(
    in_database: bool = Query(..., alias="in-database"),
    body: StorageDeleteRequest = ...,
) -> Any:
    return [body , "in-database: " + str(in_database)]



@router.get(
    "/storage/{id}",
    response_model=Product,
    responses={"404": {"model": ProductNotFoundResponse}},
)
async def g_e_t_storage_id(id: int) -> Union[Product, ProductNotFoundResponse]:
    return await get_product_by_id(id)


@router.delete(
    "/storage/{id}",
    response_model=Any,
    responses={"404": {"model": ProductNotFoundResponse}},
)
def d_e_l_e_t_e_storage_id(id: float) -> Union[Any, ProductNotFoundResponse]:
    pass


@router.put(
    "/storage/{id}",
    response_model=Any,
    responses={"404": {"model": ProductNotFoundResponse}},
)
def p_u_t_storage_id(
    id: float, body: Product = ...
) -> Union[Any, ProductNotFoundResponse]:
    pass


app.include_router(router)